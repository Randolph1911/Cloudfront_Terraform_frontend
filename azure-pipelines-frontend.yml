# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

resources:
  pipelines:
    - pipeline: Cloudfront_Terraform
      source: ohbster.Cloudfront_Terraform
      project: Cloudfront_Terraform
      trigger: true #run the front end each time that the backend successfully completes

variables:
- name: dist_id

trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
  
- task: DownloadBuildArtifacts@1
  inputs:
    buildType: 'specific'
    project: 'a7e208c4-07ae-48f0-a58d-837ef1f7cb64'
    pipeline: '7'
    buildVersionToDownload: 'latest'
    downloadType: 'specific'
    downloadPath: '$(System.ArtifactsDirectory)'

# - script: DIST_ID=$(cat $(System.ArtifactsDirectory)/variables/pipeline.env)
#   displayName: 'Restore Environment Variables'

- bash: |
        echo `cat $(System.ArtifactsDirectory)/variables/pipeline.env`
        echo "##vso[task.setvariable variable=distribution_id;isOutput=true]$(distribution_id)" 
  name: DistStep

- task: TerraformInstaller@1
  inputs:
    terraformVersion: 'latest'
  displayName: 'Install Terraform'
- task: TerraformTaskV4@4
  inputs:
    provider: 'aws'
    command: 'init'
    backendServiceAWS: '(Cloudfront_Terraform)AWS_for_terrafrom'
    backendAWSBucketName: 'ohbster-ado-terraform-class5'
    backendAWSKey: 'cloudfront/frontend/terraform.tfstate'
  displayName: 'Initialize Terraform'

- task: TerraformTaskV4@4
  inputs:
    provider: 'aws'
    command: 'apply'
    commandOptions: '--auto-approve'
    environmentServiceNameAWS: '(Cloudfront_Terraform)AWS_for_terrafrom'
  displayName: 'Apply Terraform'
  
# - bash: |
#     terraform show --json | jq '.values.outputs.distribution_id.value'
#     echo "##vso[task.setvariable variable=distribution_id;isOutput=true]$distribution_id"
#     aws cloudfront create-invalidation --distribution-id $(terraform show --json | jq '.values.outputs.distribution_id.value') --paths "/*"
#   name: GetDistributionId

# - bash: |
#     aws cloudfront create-invalidation --distribution-id $(DistStep.distribution_id) --paths "/*"
#   displayName: Invalidate Cache
- bash: |
    echo ${{ DistStep.distribution_id }}
  displayName: Test Variable
